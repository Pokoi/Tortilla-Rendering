class View
{
	Color_Buffer color_buffer
	Rasterizer rasterizer
	Model3D a,b,c... -> usar un map <string, Model3D*>
	update(float t)
	paint ()
};

class Material
{
	// Color
	// Textura2D
	// ka, kd, ks...
};

class Model3D
{
	// Atributos de vértices (coordenadas, color, normal uv)
	// Lista de materiales
	// Lista de mallas
	// Transform
	// Parent * 

	Model3D(const string & model_file_path)
	update(float t)
	render (Rasterizer &)
};

class Mesh
{
	// Lista de índices
	// Material *
	Mesh(Vertex_Data &, Index_Buffer &)
	render (Rasterizer &)
	is_backface() 
}



-------
INPUT

coordenadas (30)
indices de coordenadas (90)


normales (45)
indices de normales (90)

---------
SALIDA

coordenadas (90)
indices de coordenadas (90)


normales (90)
indices de normales (90)

-> bucle que por cada índice 