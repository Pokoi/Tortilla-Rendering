
class View
{
	Color_Buffer color_buffer;
	Rasterizer   rasterizer;
	Model3D      a, b, c, ...; -> usar mejor map< string, Model3D * >
	Camera cam;
	update (float t)
	paint  ()
}

class Camera
{
	// Transform
	// Matriz de proyección
}

class Material
{
	// Color
	// Textura2D
	// ka, kd, ks, etc...
}

class Model3D 
{
	// Atributos de vértices (coordenadas, color, normal, uv)
	// Lista de materiales (opcional)
	// Lista de mallas
	// Transform
	// Parent *
	Model3D(const string & model_file_path)
	update (float t)
	render (Rasterizer & )
}

class Mesh
{
	// Lista de índices
	// Material *
	Mesh(Vertex_Data & , Index_Buffer & )
	render (Rasterizer & )
	is_backface(...)
}



